generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String            @id @default(cuid())
  name             String
  sku              String            @unique
  image            String?
  category         ProductCategory
  description      String?
  reorderPoint     Int?              @default(0)
  tag              String?
  asin             String?
  weight           Float?
  weightUnit       String?           @default("kg")
  supplierId       String?
  buyPrice         Float?
  status           ProductStatus     @default(ACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  inBundles        BundleComponent[] @relation("BundleComponentParent")
  bundleComponents BundleComponent[] @relation("BundleComponentProduct")
  orderItems       OrderItem[]
  platformProducts PlatformProduct[]
  prices           ProductPrice[]
  supplier         Supplier?         @relation(fields: [supplierId], references: [id])
  warehouse        WarehouseStock?

  @@map("products")
}

model WarehouseStock {
  id          String   @id @default(cuid())
  productId   String   @unique
  total       Int      @default(0)
  inOrder     Int      @default(0)
  available   Int      @default(0)
  awaiting    Int      @default(0)
  reserved    Int      @default(0)
  binLocation String?
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("warehouse_stock")
}

model ProductPrice {
  id        String   @id @default(cuid())
  productId String
  platform  Platform
  price     Float
  currency  String   @default("USD")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, platform])
  @@map("product_prices")
}

model BundleComponent {
  id             String  @id @default(cuid())
  bundleId       String
  componentId    String
  quantityNeeded Int
  bundle         Product @relation("BundleComponentParent", fields: [bundleId], references: [id], onDelete: Cascade)
  component      Product @relation("BundleComponentProduct", fields: [componentId], references: [id], onDelete: Cascade)

  @@unique([bundleId, componentId])
  @@map("bundle_components")
}

model PlatformProduct {
  id          String    @id @default(cuid())
  productId   String
  platform    Platform
  platformSku String?
  platformId  String?
  title       String?
  description String?
  isListed    Boolean   @default(false)
  lastSync    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, platform])
  @@map("platform_products")
}

model Customer {
  id            String             @id @default(cuid())
  name          String
  email         String             @unique
  phone         String?
  totalOrders   Int                @default(0)
  totalSpent    Float              @default(0)
  lastOrderDate DateTime?
  status        CustomerStatus     @default(ACTIVE)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  address       CustomerAddress?
  platforms     CustomerPlatform[]
  tags          CustomerTag[]
  orders        Order[]

  @@map("customers")
}

model CustomerAddress {
  id         String   @id @default(cuid())
  customerId String   @unique
  street     String
  city       String
  state      String
  zip        String
  country    String
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_addresses")
}

model CustomerTag {
  id         String   @id @default(cuid())
  customerId String
  tag        String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, tag])
  @@map("customer_tags")
}

model CustomerPlatform {
  id                 String   @id @default(cuid())
  customerId         String
  platform           Platform
  platformCustomerId String?
  createdAt          DateTime @default(now())
  customer           Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, platform])
  @@map("customer_platforms")
}

model Order {
  id              String                @id @default(cuid())
  orderId         String                @unique
  customerId      String
  platform        Platform
  status          OrderStatus           @default(NEW)
  total           Float
  currency        String                @default("USD")
  paid            Boolean               @default(false)
  trackingNumber  String?
  orderDate       DateTime              @default(now())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  items           OrderItem[]
  shippingAddress OrderShippingAddress?
  customer        Customer              @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model OrderShippingAddress {
  id      String @id @default(cuid())
  orderId String @unique
  name    String
  street  String
  city    String
  state   String
  zip     String
  country String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_shipping_addresses")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String?
  productName String
  sku         String?
  quantity    Int
  price       Float
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Supplier {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  isActive  Boolean   @default(true)
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("suppliers")
}

model PlatformIntegration {
  id           String            @id @default(cuid())
  platform     Platform          @unique
  status       IntegrationStatus @default(DISCONNECTED)
  region       String?
  credentials  String?
  lastSync     DateTime?
  syncEnabled  Boolean           @default(false)
  productCount Int               @default(0)
  lastError    String?
  errorCount   Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("platform_integrations")
}

model DashboardMetric {
  id          String    @id @default(cuid())
  metricType  String
  date        DateTime
  intValue    Int?
  floatValue  Float?
  stringValue String?
  jsonValue   String?
  platform    Platform?
  createdAt   DateTime  @default(now())

  @@unique([metricType, date, platform])
  @@map("dashboard_metrics")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model comments {
  comment String?

  @@ignore
}

enum ProductCategory {
  SIMPLE
  CONFIGURABLE
  MERGED
  BUNDLED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  LOW_STOCK
  OUT_OF_STOCK
}

enum Platform {
  EBAY
  SHOPIFY
  ETSY
  MULTIORDERS
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  NEW
  PREPARED
  IN_PROGRESS
  PENDING
  SHIPPED
  CANCELLED
  COMPLETED
}

enum IntegrationStatus {
  LIVE
  INTEGRATING
  ERRORED
  DISCONNECTED
}
